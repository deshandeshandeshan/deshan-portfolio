/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type ProjectHeaderImage = {
  _type: "projectHeaderImage";
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type ProjectDetails = {
  _type: "projectDetails";
  title?: string;
  description?: string;
  year?: string;
  liveSite?: {
    liveSite?: string;
    liveSiteTitle?: string;
  };
  projectDeliverables?: Array<{
    deliverable?: string;
    _type: "deliverables";
    _key: string;
  }>;
  projectStack?: Array<{
    technology?: string;
    _type: "stack";
    _key: string;
  }>;
};

export type Landscape = {
  _type: "landscape";
  title?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type DoubleLandscape = {
  _type: "doubleLandscape";
  title?: string;
  leftImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  rightImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type DoublePortrait = {
  _type: "doublePortrait";
  title?: string;
  leftImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  rightImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
};

export type PageBuilder = Array<{
  _key: string;
} & DoublePortrait | {
  _key: string;
} & Landscape | {
  _key: string;
} & DoubleLandscape | {
  _key: string;
} & ProjectDetails | {
  _key: string;
} & ProjectHeaderImage>;

export type Work = {
  _id: string;
  _type: "work";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  video?: MuxVideo;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Contact = {
  _id: string;
  _type: "contact";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  contactImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  description?: string;
  contacts?: {
    email?: string;
    phoneNumber?: number;
  };
  socialLinks?: Array<{
    linkName?: string;
    link?: string;
    _type: "socialLink";
    _key: string;
  }>;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  year?: string;
  liveSite?: {
    liveSite?: string;
    liveSiteTitle?: string;
  };
  projectDeliverables?: Array<{
    deliverable?: string;
    _type: "deliverables";
    _key: string;
  }>;
  projectStack?: Array<{
    technology?: string;
    _type: "stack";
    _key: string;
  }>;
  video?: MuxVideo;
  projectImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  content?: PageBuilder;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type MuxVideo = {
  _type: "mux.video";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "mux.videoAsset";
  };
};

export type MuxVideoAsset = {
  _id: string;
  _type: "mux.videoAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  status?: string;
  assetId?: string;
  playbackId?: string;
  filename?: string;
  thumbTime?: number;
  data?: MuxAssetData;
};

export type MuxAssetData = {
  _type: "mux.assetData";
  resolution_tier?: string;
  upload_id?: string;
  created_at?: string;
  id?: string;
  status?: string;
  max_stored_resolution?: string;
  passthrough?: string;
  encoding_tier?: string;
  master_access?: string;
  aspect_ratio?: string;
  duration?: number;
  max_stored_frame_rate?: number;
  mp4_support?: string;
  max_resolution_tier?: string;
  tracks?: Array<{
    _key: string;
  } & MuxTrack>;
  playback_ids?: Array<{
    _key: string;
  } & MuxPlaybackId>;
  static_renditions?: MuxStaticRenditions;
};

export type MuxStaticRenditions = {
  _type: "mux.staticRenditions";
  status?: string;
  files?: Array<{
    _key: string;
  } & MuxStaticRenditionFile>;
};

export type MuxStaticRenditionFile = {
  _type: "mux.staticRenditionFile";
  ext?: string;
  name?: string;
  width?: number;
  bitrate?: number;
  filesize?: number;
  height?: number;
};

export type MuxPlaybackId = {
  _type: "mux.playbackId";
  id?: string;
  policy?: string;
};

export type MuxTrack = {
  _type: "mux.track";
  id?: string;
  type?: string;
  max_width?: number;
  max_frame_rate?: number;
  duration?: number;
  max_height?: number;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | ProjectHeaderImage | ProjectDetails | Landscape | DoubleLandscape | DoublePortrait | PageBuilder | Work | Contact | Project | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug | MuxVideo | MuxVideoAsset | MuxAssetData | MuxStaticRenditions | MuxStaticRenditionFile | MuxPlaybackId | MuxTrack;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: PROJECTS_QUERY
// Query: *[_type == "project"]{    _id,    _createdAt,    name,    year,    description,    "slug": slug.current,    video {      asset-> {        playbackId,        assetId,        filename      }    },    projectImage {      alt,      asset->{        _id,        url      }    },    liveSite {      liveSite,      liveSiteTitle    },    projectDeliverables[] {      _key,      deliverable    },    projectStack[] {      _key,      technology    }  }
export type PROJECTS_QUERYResult = Array<{
  _id: string;
  _createdAt: string;
  name: string | null;
  year: string | null;
  description: string | null;
  slug: string | null;
  video: {
    asset: {
      playbackId: string | null;
      assetId: string | null;
      filename: string | null;
    } | null;
  } | null;
  projectImage: {
    alt: string | null;
    asset: {
      _id: string;
      url: string | null;
    } | null;
  } | null;
  liveSite: {
    liveSite: string | null;
    liveSiteTitle: string | null;
  } | null;
  projectDeliverables: Array<{
    _key: string;
    deliverable: string | null;
  }> | null;
  projectStack: Array<{
    _key: string;
    technology: string | null;
  }> | null;
}>;
// Variable: SINGLE_PROJECT_QUERY
// Query: *[_type == "project" && slug.current == $slug][0] {    _id,    _createdAt,    name,    year,    description,    video {      asset-> {        playbackId,        assetId,        filename      }    },    liveSite {      liveSite,      liveSiteTitle    },    projectDeliverables[] {      _key,      deliverable    },    projectStack[] {      _key,      technology    },    content[]{      _key,      _type,      _type == "projectHeaderImage" => {        title,        image{ alt, caption, asset->{ _id, url } }      },      _type == "landscape" => {        title,        image{ alt, caption, asset->{ _id, url } }      },      _type == "doubleLandscape" => {        title,        leftImage{ alt, caption, asset->{ _id, url } },        rightImage{ alt, caption, asset->{ _id, url } }      },      _type == "doublePortrait" => {        title,        leftImage{ alt, caption, asset->{ _id, url } },        rightImage{ alt, caption, asset->{ _id, url } }      },      _type == "projectDetails" => {        title,        description,        year,        liveSite{ liveSite, liveSiteTitle },        projectDeliverables[]{ deliverable },        projectStack[]{ technology }      }    }  }
export type SINGLE_PROJECT_QUERYResult = {
  _id: string;
  _createdAt: string;
  name: string | null;
  year: string | null;
  description: string | null;
  video: {
    asset: {
      playbackId: string | null;
      assetId: string | null;
      filename: string | null;
    } | null;
  } | null;
  liveSite: {
    liveSite: string | null;
    liveSiteTitle: string | null;
  } | null;
  projectDeliverables: Array<{
    _key: string;
    deliverable: string | null;
  }> | null;
  projectStack: Array<{
    _key: string;
    technology: string | null;
  }> | null;
  content: Array<{
    _key: string;
    _type: "doubleLandscape";
    title: string | null;
    leftImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
    rightImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "doublePortrait";
    title: string | null;
    leftImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
    rightImage: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "landscape";
    title: string | null;
    image: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  } | {
    _key: string;
    _type: "projectDetails";
    title: string | null;
    description: string | null;
    year: string | null;
    liveSite: {
      liveSite: string | null;
      liveSiteTitle: string | null;
    } | null;
    projectDeliverables: Array<{
      deliverable: string | null;
    }> | null;
    projectStack: Array<{
      technology: string | null;
    }> | null;
  } | {
    _key: string;
    _type: "projectHeaderImage";
    title: string | null;
    image: {
      alt: string | null;
      caption: string | null;
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  }> | null;
} | null;
// Variable: WORK_QUERY
// Query: *[_type == "work"][0]{    _id,    _createdAt,    title,    description,    video {      asset-> {        playbackId,        assetId,        filename      }    },    image {      alt,      asset->{        _id,        url      }    }  }
export type WORK_QUERYResult = {
  _id: string;
  _createdAt: string;
  title: string | null;
  description: string | null;
  video: {
    asset: {
      playbackId: string | null;
      assetId: string | null;
      filename: string | null;
    } | null;
  } | null;
  image: {
    alt: string | null;
    asset: {
      _id: string;
      url: string | null;
    } | null;
  } | null;
} | null;
// Variable: CONTACT_QUERY
// Query: *[_type == "contact"][0]{    _id,    _createdAt,    description,    contactImage {      alt,      asset->{        _id,        url      }    },    contacts {      email,      phoneNumber    },    socialLinks[] {      _key,      linkName,      link    }  }
export type CONTACT_QUERYResult = {
  _id: string;
  _createdAt: string;
  description: string | null;
  contactImage: {
    alt: string | null;
    asset: {
      _id: string;
      url: string | null;
    } | null;
  } | null;
  contacts: {
    email: string | null;
    phoneNumber: number | null;
  } | null;
  socialLinks: Array<{
    _key: string;
    linkName: string | null;
    link: string | null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"project\"]{\n    _id,\n    _createdAt,\n    name,\n    year,\n    description,\n    \"slug\": slug.current,\n    video {\n      asset-> {\n        playbackId,\n        assetId,\n        filename\n      }\n    },\n    projectImage {\n      alt,\n      asset->{\n        _id,\n        url\n      }\n    },\n    liveSite {\n      liveSite,\n      liveSiteTitle\n    },\n    projectDeliverables[] {\n      _key,\n      deliverable\n    },\n    projectStack[] {\n      _key,\n      technology\n    }\n  }\n": PROJECTS_QUERYResult;
    "\n  *[_type == \"project\" && slug.current == $slug][0] {\n    _id,\n    _createdAt,\n    name,\n    year,\n    description,\n    video {\n      asset-> {\n        playbackId,\n        assetId,\n        filename\n      }\n    },\n    liveSite {\n      liveSite,\n      liveSiteTitle\n    },\n    projectDeliverables[] {\n      _key,\n      deliverable\n    },\n    projectStack[] {\n      _key,\n      technology\n    },\n    content[]{\n      _key,\n      _type,\n\n      _type == \"projectHeaderImage\" => {\n        title,\n        image{ alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"landscape\" => {\n        title,\n        image{ alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"doubleLandscape\" => {\n        title,\n        leftImage{ alt, caption, asset->{ _id, url } },\n        rightImage{ alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"doublePortrait\" => {\n        title,\n        leftImage{ alt, caption, asset->{ _id, url } },\n        rightImage{ alt, caption, asset->{ _id, url } }\n      },\n\n      _type == \"projectDetails\" => {\n        title,\n        description,\n        year,\n        liveSite{ liveSite, liveSiteTitle },\n        projectDeliverables[]{ deliverable },\n        projectStack[]{ technology }\n      }\n    }\n  }\n": SINGLE_PROJECT_QUERYResult;
    "\n  *[_type == \"work\"][0]{\n    _id,\n    _createdAt,\n    title,\n    description,\n    video {\n      asset-> {\n        playbackId,\n        assetId,\n        filename\n      }\n    },\n    image {\n      alt,\n      asset->{\n        _id,\n        url\n      }\n    }\n  }\n": WORK_QUERYResult;
    "\n  *[_type == \"contact\"][0]{\n    _id,\n    _createdAt,\n    description,\n    contactImage {\n      alt,\n      asset->{\n        _id,\n        url\n      }\n    },\n    contacts {\n      email,\n      phoneNumber\n    },\n    socialLinks[] {\n      _key,\n      linkName,\n      link\n    }\n  }\n": CONTACT_QUERYResult;
  }
}
